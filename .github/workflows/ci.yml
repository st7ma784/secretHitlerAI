name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-asyncio pytest-cov black flake8 mypy
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 backend --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 backend --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Format check with black
      run: |
        black --check backend --diff
    
    - name: Type check with mypy
      run: |
        mypy backend --ignore-missing-imports --no-strict-optional
      continue-on-error: true
    
    - name: Test with pytest
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install requests
    
    - name: Start server
      run: |
        cd backend
        python simple_server.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 10
    
    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8000/api/ai/training-status
        curl -f http://localhost:8000/api/ai/training-metrics
        curl -f http://localhost:8000/training
        
        # Test training configuration
        curl -X POST http://localhost:8000/api/ai/configure-training \
          -H "Content-Type: application/json" \
          -d '{"num_agents": 6, "games_per_session": 10, "lora_rank": 16, "training_method": "rlhf"}'
    
    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run bandit security check
      run: |
        bandit -r backend -f json -o bandit-report.json || true
        bandit -r backend
    
    - name: Check dependencies for known vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install locust
    
    - name: Start server
      run: |
        cd backend
        python simple_server.py &
        SERVER_PID=$!
        echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
        sleep 10
    
    - name: Run performance tests
      run: |
        # Create a simple locust test file
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        
        class APIUser(HttpUser):
            wait_time = between(1, 3)
            
            @task
            def test_training_status(self):
                self.client.get("/api/ai/training-status")
            
            @task
            def test_training_metrics(self):
                self.client.get("/api/ai/training-metrics")
            
            @task
            def test_training_interface(self):
                self.client.get("/training")
        EOF
        
        # Run load test
        locust -f locustfile.py --host=http://localhost:8000 \
          --users=10 --spawn-rate=2 --run-time=30s --headless
    
    - name: Stop server
      if: always()
      run: |
        if [ ! -z "$SERVER_PID" ]; then
          kill $SERVER_PID || true
        fi

  build-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image (test)
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        load: true
        tags: test-build
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker build
      run: |
        docker run --rm test-build python -c "import backend.simple_server; print('Build successful')"
